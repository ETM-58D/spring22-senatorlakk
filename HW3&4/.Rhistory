```{r setup, include=FALSE}
lin_reg_h10 <- train(production ~ .,
data = weather_production_train_h10 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h10 <- train(production ~ .,
data = weather_production_train_h10 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h10 <- train(production ~ .,
data = weather_production_train_h10 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h10 <- train(production ~ .,
data = weather_production_train_h10 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h10, Decision_Tree = dec_tree_h10, Random_Forest = rand_forest_h10, GLMNET = glmnet_h10))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 11
```{r setup, include=FALSE}
lin_reg_h11 <- train(production ~ .,
data = weather_production_train_h11 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h11 <- train(production ~ .,
data = weather_production_train_h11 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h11 <- train(production ~ .,
data = weather_production_train_h11 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h11 <- train(production ~ .,
data = weather_production_train_h11 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h11, Decision_Tree = dec_tree_h11, Random_Forest = rand_forest_h11, GLMNET = glmnet_h11))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 12
```{r setup, include=FALSE}
lin_reg_h12 <- train(production ~ .,
data = weather_production_train_h12 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h12 <- train(production ~ .,
data = weather_production_train_h12 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h12 <- train(production ~ .,
data = weather_production_train_h12 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h12 <- train(production ~ .,
data = weather_production_train_h12 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h12, Decision_Tree = dec_tree_h12, Random_Forest = rand_forest_h12, GLMNET = glmnet_h12))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 13
```{r setup, include=FALSE}
lin_reg_h13 <- train(production ~ .,
data = weather_production_train_h13 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h13 <- train(production ~ .,
data = weather_production_train_h13 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h13 <- train(production ~ .,
data = weather_production_train_h13 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h13 <- train(production ~ .,
data = weather_production_train_h13 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h13, Decision_Tree = dec_tree_h13, Random_Forest = rand_forest_h13, GLMNET = glmnet_h13))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 14
```{r setup, include=FALSE}
lin_reg_h14 <- train(production ~ .,
data = weather_production_train_h14 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h14 <- train(production ~ .,
data = weather_production_train_h14 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h14 <- train(production ~ .,
data = weather_production_train_h14 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h14 <- train(production ~ .,
data = weather_production_train_h14 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h14, Decision_Tree = dec_tree_h14, Random_Forest = rand_forest_h14, GLMNET = glmnet_h14))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 15
```{r setup, include=FALSE}
lin_reg_h15 <- train(production ~ .,
data = weather_production_train_h15 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h15 <- train(production ~ .,
data = weather_production_train_h15 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h15 <- train(production ~ .,
data = weather_production_train_h15 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h15 <- train(production ~ .,
data = weather_production_train_h15 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h15, Decision_Tree = dec_tree_h15, Random_Forest = rand_forest_h15, GLMNET = glmnet_h15))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 16
```{r setup, include=FALSE}
lin_reg_h16 <- train(production ~ .,
data = weather_production_train_h16 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h16 <- train(production ~ .,
data = weather_production_train_h16 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h16 <- train(production ~ .,
data = weather_production_train_h16 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h16 <- train(production ~ .,
data = weather_production_train_h16 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h16, Decision_Tree = dec_tree_h16, Random_Forest = rand_forest_h16, GLMNET = glmnet_h16))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 17
```{r setup, include=FALSE}
lin_reg_h17 <- train(production ~ .,
data = weather_production_train_h17 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h17 <- train(production ~ .,
data = weather_production_train_h17 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h17 <- train(production ~ .,
data = weather_production_train_h17 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h17 <- train(production ~ .,
data = weather_production_train_h17 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h17, Decision_Tree = dec_tree_h17, Random_Forest = rand_forest_h17, GLMNET = glmnet_h17))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 18
```{r setup, include=FALSE}
lin_reg_h18 <- train(production ~ .,
data = weather_production_train_h18 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h18 <- train(production ~ .,
data = weather_production_train_h18 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h18 <- train(production ~ .,
data = weather_production_train_h18 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h18 <- train(production ~ .,
data = weather_production_train_h18 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h18, Decision_Tree = dec_tree_h18, Random_Forest = rand_forest_h18, GLMNET = glmnet_h18))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
###Hour 19
```{r setup, include=FALSE}
lin_reg_h19 <- train(production ~ .,
data = weather_production_train_h19 %>% select(-date.x, -hour.x),
method = "lm",
trControl = fitControl,
tuneGrid = expand.grid(intercept = T),
tuneLength = 5)
dec_tree_h19 <- train(production ~ .,
data = weather_production_train_h19 %>% select(-date.x, -hour.x),
method = "rpart",
trControl = fitControl,
tuneGrid = expand.grid(cp = 0.01524276),
tuneLength = 6)
rand_forest_h19 <- train(production ~ .,
data = weather_production_train_h19 %>% select(-date.x, -hour.x),
method = "ranger",
trControl = fitControl,
num.trees = 50,
tuneGrid = expand.grid(mtry = 52, splitrule = "extratrees", min.node.size = 5),
importance = "impurity")
glmnet_h19 <- train(production ~ .,
data = weather_production_train_h19 %>% select(-date.x, -hour.x),
method = "glmnet",
trControl = fitControl,
tuneGrid = expand.grid(alpha = 0.55, lambda = 0.2097799),
tuneLenght= 5)
results = resamples(list(Linear_Regression = lin_reg_h19, Decision_Tree = dec_tree_h19, Random_Forest = rand_forest_h19, GLMNET = glmnet_h19))
summary(results)
```
```{r setup, include=FALSE}
bwplot(results)
```
#Prediction for the Test Period
As Random Forest model is generally the best one according to the model comparison results among hourly models, we choose to continue with Random Forest model to make the predictions on the test set. Below the predictions are done.
```{r setup, include=FALSE}
rf_h5_pred_test <- predict(rand_forest_h5$finalModel, data = weather_production_test_h5)
rf_h6_pred_test <- predict(rand_forest_h6$finalModel, data = weather_production_test_h6)
rf_h7_pred_test <- predict(rand_forest_h7$finalModel, data = weather_production_test_h7)
rf_h8_pred_test <- predict(rand_forest_h8$finalModel, data = weather_production_test_h8)
rf_h9_pred_test <- predict(rand_forest_h9$finalModel, data = weather_production_test_h9)
rf_h10_pred_test <- predict(rand_forest_h10$finalModel, data = weather_production_test_h10)
rf_h11_pred_test <- predict(rand_forest_h11$finalModel, data = weather_production_test_h11)
rf_h12_pred_test <- predict(rand_forest_h12$finalModel, data = weather_production_test_h12)
rf_h13_pred_test <- predict(rand_forest_h13$finalModel, data = weather_production_test_h13)
rf_h14_pred_test <- predict(rand_forest_h14$finalModel, data = weather_production_test_h14)
rf_h15_pred_test <- predict(rand_forest_h15$finalModel, data = weather_production_test_h15)
rf_h16_pred_test <- predict(rand_forest_h16$finalModel, data = weather_production_test_h16)
rf_h17_pred_test <- predict(rand_forest_h17$finalModel, data = weather_production_test_h17)
rf_h18_pred_test <- predict(rand_forest_h18$finalModel, data = weather_production_test_h18)
rf_h19_pred_test <- predict(rand_forest_h19$finalModel, data = weather_production_test_h19)
```
Test set predictions are binded with test data set for each hour.
```{r setup, include=FALSE}
df4_test_h5_w_pred <- weather_production_test_h5 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h5_pred_test$predictions)
df4_test_h6_w_pred <- weather_production_test_h6 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h6_pred_test$predictions)
df4_test_h7_w_pred <- weather_production_test_h7 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h7_pred_test$predictions)
df4_test_h8_w_pred <- weather_production_test_h8 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h8_pred_test$predictions)
df4_test_h9_w_pred <- weather_production_test_h9 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h9_pred_test$predictions)
df4_test_h10_w_pred <- weather_production_test_h10 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h10_pred_test$predictions)
df4_test_h11_w_pred <- weather_production_test_h11%>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h11_pred_test$predictions)
df4_test_h12_w_pred <- weather_production_test_h12 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h12_pred_test$predictions)
df4_test_h13_w_pred <- weather_production_test_h13 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h13_pred_test$predictions)
df4_test_h14_w_pred <- weather_production_test_h14 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h14_pred_test$predictions)
df4_test_h15_w_pred <- weather_production_test_h15 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h15_pred_test$predictions)
df4_test_h16_w_pred <- weather_production_test_h16 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h16_pred_test$predictions)
df4_test_h17_w_pred <- weather_production_test_h17 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h17_pred_test$predictions)
df4_test_h18_w_pred <- weather_production_test_h18 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h18_pred_test$predictions)
df4_test_h19_w_pred <- weather_production_test_h19 %>% select(date.x, hour.x, production) %>% mutate(Prediction = rf_h19_pred_test$predictions)
```
Test sets for each hour with predictions are row binded. Thus, we create one test set with prediction for whole data.
```{r setup, include=FALSE}
df4_test_w_pred <- rbind(df4_test_h5_w_pred, df4_test_h6_w_pred, df4_test_h7_w_pred, df4_test_h8_w_pred,
df4_test_h9_w_pred, df4_test_h10_w_pred, df4_test_h11_w_pred, df4_test_h12_w_pred,
df4_test_h13_w_pred, df4_test_h14_w_pred, df4_test_h15_w_pred, df4_test_h16_w_pred,
df4_test_h17_w_pred, df4_test_h18_w_pred, df4_test_h19_w_pred) %>% arrange(date.x, hour.x)
head(df4_test_w_pred,15)
```
```{r setup, include=FALSE}
skim(df4_test_w_pred %>% select(production, Prediction))
```
Prediction and residual analysis for test set of random forest model is shown. Actual vs Predicted plot shows that predicted values are generally close to the actual values. There are few observations which are too much deviated. Histogram of residuals shows normal distribution around mean value of 0 which is good for the model. Finally, predicted vs residuals plot shows that predicted values are distributed around 0 which is also good for the model even if there some few deviated values, they are not so important and not so much.
```{r setup, include=FALSE}
plot(df4_test_w_pred$Prediction, df4_test_w_pred$production, xlab = "Predicted", ylab = "Actual", main = "Actual vs Predicted Plot for Random Forest Model with Test Set")
abline(a=0,b=1,col='red', lty = 2)
```
```{r setup, include=FALSE}
rf_residuals_test <- df4_test_w_pred$production - df4_test_w_pred$Prediction
hist(rf_residuals_test, xlab = "Residuals", main = "Residuals Histogram of Random Forest Model")
```
```{r setup, include=FALSE}
plot(df4_test_w_pred$Prediction, rf_residuals_test, xlab = "Predicted", ylab = "Residuals", main = "Predicted vs Residuals Plot for Random Forest Model with Test Set")
abline(h = 0, col = "red", lty = 2)
```
Lastly, RMSE values of test set predictions are shown. It is not a high value which is also good for the model.
```{r setup, include=FALSE}
RMSE(df4_test_w_pred$production, df4_test_w_pred$Prediction)
```
install.packages("corrplot")
production=fread("C:/Users/user/Documents/GitHub/spring22-senatorlakk/Project/production.csv")
weather=fread("C:/Users/user/Documents/GitHub/spring22-senatorlakk/Project/long_weather.csv")
head(production)
head(weather)
production[,timestamp:=as.Date(date)+dhours(hour)]
head(production)
ggplot(production,aes(x=timestamp,y=production)) + geom_line()
ggplot(production[date>'2022-04-25'],aes(x=timestamp,y=production)) + geom_line()
weather[,.N,list(lat,lon)]
weather[,.N,list(variable)]
dswrf=weather[variable=='DSWRF' & lat==36.5 & lon==33.25]
dswrf[,timestamp:=as.Date(date)+dhours(hour)]
head(dswrf)
ggplot(dswrf[date>'2022-04-25'],aes(x=timestamp,y=value)) + geom_line() + geom_line()
wide_weather=dcast(weather,date+hour~variable+lat+lon,value.var='value')
str(wide_weather)
str(production)
#install.packages("tidyverse")
#install.packages("lubridate")
#install.packages("readxl")
#install.packages("skimr")
#install.packages("magrittr")
#install.packages("tidyquant")
#install.packages("tsibble")
#install.packages("feasts")
#install.packages("ggcorrplot")
#install.packages("glmnet")
#install.packages("caret")
#install.packages("rattle")
#install.packages("data.table")
#install.packages("reshape")
library(tidyverse)
library(lubridate)
library(readxl)
library(skimr)
library(magrittr)
library(tidyquant)
library(tsibble)
library(feasts)
library(ggcorrplot)
library(glmnet)
library(caret)
library(rattle)
library(data.table)
library(reshape)
set.seed(1234)
knitr::opts_chunk$set(error = TRUE)
production=fread("C:/Users/user/Documents/GitHub/spring22-senatorlakk/Project/production.csv")
weather=fread("C:/Users/user/Documents/GitHub/spring22-senatorlakk/Project/long_weather.csv")
head(production)
head(weather)
production[,timestamp:=as.Date(date)+dhours(hour)]
head(production)
ggplot(production,aes(x=timestamp,y=production)) + geom_line()
ggplot(production[date>'2022-04-25'],aes(x=timestamp,y=production)) + geom_line()
weather[,.N,list(lat,lon)]
weather[,.N,list(variable)]
dswrf=weather[variable=='DSWRF' & lat==36.5 & lon==33.25]
dswrf[,timestamp:=as.Date(date)+dhours(hour)]
head(dswrf)
rand_forest_h11$finalModel
rand_forest_h11$finalModel
rand_forest_h11$finalModel
rand_forest_h11$finalModel
rand_forest_h11$finalModel
rand_forest_h11$finalModel
rand_forest_h11$finalModel
rand_forest_h11$finalModel
```{r message=FALSE,warning=FALSE}
install.packages("tidyverse")
install.packages("scatterplot3d")
install.packages("tibble")
library(tidyverse)
library(scatterplot3d)
library(tibble)
x <- read.table("uWaveGestureLibrary_X_TRAIN.txt")
y <- read.table("uWaveGestureLibrary_Y_TRAIN.txt")
z <- read.table("uWaveGestureLibrary_Z_TRAIN.txt")
x <- t(x)
y <- t(y)
z <- t(z)
bind1 <- cbind(x[,11], y[,11], z[,11])
bind2 <- cbind(x[,20], y[,20], z[,20])
bind3 <- cbind(x[,4], y[,4], z[,4])
bind4 <- cbind(x[,5], y[,5], z[,5])
bind5 <- cbind(x[,2], y[,2], z[,2])
bind6 <- cbind(x[,1], y[,11], z[,11])
bind7 <- cbind(x[,7], y[,7], z[,7])
bind8 <- cbind(x[,6], y[,6], z[,6])
scatterplot3d(x[,11], y[,11], z[,11], main="Class 1", color = 1)
scatterplot3d(x[,20], y[,20], z[,20], main="Class 2", color = 2)
scatterplot3d(x[,4], y[,4], z[,4], main="Class 3", color = 3)
scatterplot3d(x[,5], y[,5], z[,5], main="Class 4", color = 4)
scatterplot3d(x[,2], y[,2], z[,2], main="Class 5", color = 5)
scatterplot3d(x[,1], y[,1], z[,1], main="Class 6", color = 6)
scatterplot3d(x[,7], y[,7], z[,7], main="Class 7", color = 7)
scatterplot3d(x[,6], y[,6], z[,6], main="Class 8", color = 8)
library(openxlsx)
dist=read.xlsx("mesafe.xlsx")
dist[is.na(dist)] <- 0
head(dist)
dist <- cmdscale(dist, k = 2, eig = TRUE)
x_t1 <- dist$points[, 1]
y_t1 <- dist$points[, 2]
plot(x_t1, y_t1, pch = 19, xlab = "", ylab = "", axes = F, main = "Cities of Turkey")
text(x_t1, y_t1, pos = 4, cex = 0.6, labels = colnames(dist))
install.packages('factoextra')
install.packages('cluster')
require(factoextra)
require(cluster)
data_path=file.choose()
install.packages('factoextra')
install.packages('cluster')
require(factoextra)
require(cluster)
data_path=file.choose()
install.packages("factoextra")
